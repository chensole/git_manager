#!usr/bin/perl -w
use strict;

# 左值

	# 左值是赋值的目标

	my $a = 5;  # 左值通常代表内存里的数据空间，可以使用左值的名称存储数据



# 未定义数值 undef
	
	# 标量也可以容纳perl的未定义数值

		# 可以使用 defined函数来检查------------- 若为undef，则返回 0 ; 在文字环境中被解释为空字符串

		# 也可以使用 undef 函数将变量设置为 undef值

		my $a = 5;
		undef $a;


# 处理perl中的真值

	# 可以用两种方法在标量中存储真值和假值，对应于两种标量环境： 数字和字符串环境

	# 在数字环境中，0 代表假，其余任何数值都代表真
	# 在字符串环境中，空字符串 “” 代表假，其余任何数值都代表真

# uc 将字符转换为大写

	my $b = "string";
	print uc($b)."\n";


# 裸词 ----- 单个词无引号的文本字符串（只能是一个单词）
	my %hash;

	$hash{a} = 12;

	print $hash{a}."\n";



# 表

	my ($d,$e,$f) = (1,2,3)  # 表赋值

	# perl 中内建的函数分为两组：可以处理标量的函数 和 可以处理表的函数（有一些函数两个都可以处理）


	# perl 不具有任何具体的表数据类型，因为使用表实际上编码技术，而表并不代表数据存储格式

	# 但是，perl 确实拥有表运算符----- 一对括号（）


	print (1,2,3)   # 使用逗号将一对括号里的元素分开创建表

	# 常见的表函数：
		# print map chop 

	# 在一个表中使用表------ 嵌套在表里的任何表的元素都依次添到整个表之中 (表的展开)


	print ( (1,2,3) , 2,3 (4,5,6) );  

	

	# 通过索引访问表元素

	my $f = (1,2,3)[0];

	# 使用 rand 函数来获取随机字母

	my $e = (a .. z)[rand 25];



	# 将表赋值给其他表

		# 可以使用 = 将一个表赋值给另一个
		
		my ($a,$b) = ($c,$d)  # 将表当作可赋值的实体和左值

		
		# 将一个表赋值给标量，将得到该表的最后一个元素

		my $a = (1,2,3)   # 3


		# 将标量赋值给表

		my ($a,$b,$c) = 1;    # a = 1, b,c = undef



	# 表连接到字符串


		# 将表中的元素连接为字符串，可以使用perl的join函数

		print join (" ", ('a','b','c') );


	# 字符串拆分成表

		print split /,/, "h,e,l,l,o";    # hello


	# 使用 map 作用于表中的每项
	# 使用 grep 寻找符合标准的表项

		# grep 函数实际返回原始表项的别名，对表元素进行修改实际上是对原始表项的修改



		@array1 = (1,1,1,1);
		@array2 = grep {$_ *= 2} @array1;
		print @array1[1];  # 切片   2  对原始数组进行了修改

			# 使用匿名数组赋值数组的副本

			@array1 = (1,1,1,1);
			@array2 = grep {$_ *= 2} @{ [@array1] };
			print @array1[1];  # 1
	
	# 强制进入标量环境

	print scalar (2,4,6)  # 返回表中最后一个元素 6

		# 等价于

		my $a = (2,4,6);
		print $a;
