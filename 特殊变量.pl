#!usr/bin/perl -w

use strict;

$\ = "\n";
## perl 中有许多特殊变量 (预定义变量) -------- 改变预定义变量只会影响后续代码


# $'--------  匹配后字符串

	my $string = "hello world";

	if ($string =~ /e/) {
	
		print $'."\n";    # 打印 llo world
	}

# $` ------------ 匹配前字符串
	
	print $`;

# $+ ------------- 最后一次括号匹配
	
	my $str = "hello world";

	$str =~ /he(\w+)\s+(\w+)/;

	print $+;


# $" -------------- 插入数组值的输出字段分隔符
	
	my @a = (1 .. 3);

	$" = ",";

	print "@a\n";  # 1,2,3


# $$ -------------- 进程号

	print $$."\n";


# $& -------------- 最近的模式匹配
	
	my $string1 = "hello world";

	$string1 =~ /llo/;

	print $&."\n";



# $( --------------- 真实分组编号
	
	print $(."\n";



# $, --------------- 输出字段分隔符
	
	# 在打印列表时，若不希望在任何时候都使用 join 来加入逗号，可以使用 $, ，只需设置一个，而每次打印时都起作用
	

	# $, = ";";
	print 1,2,3,"\n";    # 1;2;3;


	# 注 ： 打印数组时，要使用 $", 而不是 $,
	

# $. ---------------- 当前输入行号
	



# $/ ---------------- 输入记录分隔符
	
	# perl 从文件中读取的记录之间加入的定界符
	#
	# 默认情况下，这个变量保存新行，当从文件句柄中读取记录时，perl 使用 $/ 中的值作为记录定界符
	
	# 如果没有定义 $/ ,则可以一次读取整个多行文件
	
	            #   undef $/;



# $\ ---------------- 输出记录分隔符
		# 预定义变量保存了 print 运算符的输出记录分隔符
		# 在 print 函数打印的字符串末尾将打印这个分隔符
		
		$\ = "\n";
		print 1,2;

# $@ ------------------ 来自最后一个 eval 的错误
		# 我们准备尝试运行有风险的代码，则最好将它放在 eval 语句中，如果出现了错误， eval 可以更好的处理致命错误，而程序可能不会终止
		my $x = 0;
		my $y = 1;

		eval {my $result = $x / $y};
		print "eval says : $@" if $@;


# $] ------------------- perl版本 (老式写法)
		print $];


# $^V ------------------- 作为字符串的perl版本 (perl 5.6.0版本后改进)

		print $^V;

# $^O ------------------ 操作系统名称
		
		print $^O;




# $^T ------------------- 脚本开始运行的时间
		
		my $s = localtime ($^T);  # 返回真实时间
		print $s;



# $= --------------------- 格式当前页面长度
		
		print $=;


# $0 --------------------- 脚本名称

		print $0;


