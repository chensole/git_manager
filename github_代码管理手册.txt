#-----------------------------------------------------------------------------   git 代码管理手册 ---------------------------------------------------------

# --------------------------- 本地电脑git操作 -----------------------------------------------------------

git 组成

工作区 
暂存区
版本库



创建空仓库
git init   .git文件

创建一个版本库

git add '文件名'               将文件存从工作区 (编辑文件都是在工作区) 放至暂存区
git commit -m '说明信息'       提交更改，把暂存区的所有内容提交到当前分支----创建版本记录

查看版本库记录

git log

回退到某一版本
git reset --hard HEAD^  (回到上一个版本)
git reser --hard HEAD^^ (回到上两个版本)
git reset --hard HEAD~1 (回到版本1)
git reset --hard HEAD~2 (回到版本2)

查看之前操作记录

git reflog

查看工作区状态
git status


丢弃工作区改动内容（两种情况）

	当你改了工作区某个文件的内容，想丢弃工作区的修改时用：
		git checkout --文件名

	你改了工作区某个文件的内容，并且已经添加到了暂存区，想丢弃修改

		1. git reser HEAD 文件名
		2. git checkout --文件名



对比文件的不同

	对比工作区和某个版本中文件的不同

		git diff HEAD --文件名
	
	输出结果展示： --- 表示版本库中的内容
				   +++ 表示工作区的内容

	
	对比版本库中不同版本号文件的不同

		git diff HEAD^ HEAD -- 文件名  （比较当前版本和上个版本的不同）



删除文件


	1. rm 文件名
	
恢复删除的文件

	git checkout -- 文件名


确认要删除
	2. git rm 文件名  把删除操作放到暂存区

	3. git commit -m ''

 git rm 用于删除一个文件，如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本

	如果工作区有一个文件没有添加暂存区，你不小心删除了这个文件，那么你就无法通过git进行恢复，只有添加到暂存区的文件才能被git跟踪，才能恢复操作


git分支

主分支 master

查看当前git区有几个分支

git branch

创建分支

git branch dev 

切换分支

git checkout master  切换到master分支

创建并切换到一个新的分支(一步操作)

git checkout -b dev   新建一个名称为dev分支，并切换到该分支，之后在dev上进行的操作与master操作没有关系

合并分支到当前分支

git merge dev   将dev分支合并到master分支（默认快速合并）

git merge --no-ff dev (禁止快速合并)

删除分支
git branch -d dev  删除dev分支





# 合并分支往往不是一帆风顺的

  如果创建一个新分支后之后在两个分支中对同一个文件都进行了版本提交，这种情况就无法使用上面的代码对两个分支进行合并

  解决方法：
  		1. 对有冲突的文件进行修改（删除冲突的部分）
		2. 再进行一次提交


修复bug分支，我们会通过创建新的bug分支进行修复，然后合并(禁止快速合并)，最后删除
当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复 bug,修复后，再 git stash pop 回到工作现场




# ---------------------------------------------- 中央服务器 github ----------------------------------------------

功能：进行项目是，和其他人进行交换本地电脑代码


1. 创建仓库

2. 添加ssh账户 
	
		将本地电脑和github进行连接

		1. 回到用户家目录下，编辑文件 .gitconfig
		
		2. 在本地电脑生成ssh公钥

			ssh-keygen -t rsa -C '注册邮箱'   -t 表示一种加密方式

		3. 克隆项目(仓库)

			git clone 地址

			克隆出错
				
				fatal:could not read from remote repository 

				解决方法：(终端输入)
				eval "$(ssh-agent -s)"
				ssh-add


		4. 在本地新建分支，进行项目工作

		5. 项目完成后，向github推送分支(把该分支上所有的本地提交推送到远程库，推送时要指定本地分支)

			git push origin 本地分支名称

		
# 本地仓库与远程仓库关联
		
		1. git init

		2. git add 文件名

		3. git commit -m "注释"

		4. git remote add origin git@github.com:YotrolZ/helloTest.git  关联一个远程仓库

		5. git pull --allow-unrelated-histories orgin master (如果远程仓库中有文件这一步是必须要做的)

		6. git push -u origin master   将最新的修改推送到远程仓库

在第一次进行push时,我们加上-u参数,后期push时就不用再加-u参数，每次同步更新直接 git push即可


切记:如果我们在创建远程仓库的时候添加了README和.ignore等文件,我们在后面关联仓库后,需要先执行pull操作


		7. 取消本地目录下关联的远程库
				
				git remote remove origin

			
		8. 查看本地仓库的远程目录

				git remote -v



工作时使用git

项目经理：

	(1) 项目经理搭建项目的框架
	(2) 搭建完框架之后，项目经理把项目框架代码放到服务器上

普通员工

	(1) 在自己电脑上，生成 ssh 公钥，然后把公钥给项目经理，项目经理把它添加到服务器上面
	(2) 项目经理会给每个组员的项目代码地址，组员把代码下载到自己的电脑上
	(3) 创建本地的分支dev，在自己创建的分支中进行每天的开发
	(4) 每一个员工开发完自己的代码之后，都需要将代码发布远程上dev 分支上

	Master: 用户保存发布的项目代码 V1.0 V2.0
	Dev:保存开发过程中的代码

报错

1. error: 无法推送一些引用到 'https://github.com/***'

提示：更新被拒绝，因为远程版本库包含您本地尚不存在的提交。这通常是因为另外
提示：一个版本库已向该引用进行了推送。再次推送前，您可能需要先整合远程变更
提示：（如 'git pull ...'）。
提示：详见 'Git push --help' 中的 'Note about fast-forwards' 小节。

解决方法：
	
	先将远程仓库文件同步到本地仓库

		git pull --allow-unrelated-histories orgin master ( --allow-unrelated-histories 这个必须要加，不然要出错 因为本地目录和远程目录不是来自同一个)

	然后推送目录至仓库，即可完成进行远程同步更新

		git push -u orgin master

	
